package teacherReportTool;

import java.io.File;
import java.io.InputStream;
import java.net.JarURLConnection;
import java.net.URL;
import java.sql.Date;

public class Utilities {

	public static String getTime() {
    //public static String getTime(Class<?> cl) {
		String retVal = "Build Time Not Found";
	    try {
//	    	Class<?> cls = Class.forName("Utilities");
//	        String rn = cls.getName().replace('.', '/') + ".class";
//	        JarURLConnection j = (JarURLConnection) ClassLoader.getSystemResource(rn).openConnection();
//	        retVal= " " + j.getJarFile().getEntry("META-INF/MANIFEST.MF").getTime();
	    	
	    	File jarFile = new File	((new Utilities()).getClass().getProtectionDomain().getCodeSource().getLocation().toURI());
   			//System.out.println("jar: " + new Date(jarFile.lastModified()));
	    	retVal = ""+(new Date(jarFile.lastModified())).toString();
	    } catch (Exception e) {
	        System.out.println(e.getMessage());
	        e.printStackTrace();
	    }
	    return retVal;
	}

	// This is a Kludge. The objective is to get the resource loaded when
	// running from
	// The Eclipse IDE or an executable jar file.
	public static InputStream getResourceInputStream(String resourceName) {
		InputStream retVal = null;
		try {
	
			ClassLoader classLoader = (new HelpMenuBar()).getClass().getClassLoader();
	
			// retVal = classLoader.getResource("/teacherReportTool/resources/"
			// + resourceName);
			retVal = classLoader.getResourceAsStream("/teacherReportTool/resources/" + resourceName);
			if (retVal == null) {
				retVal = classLoader.getResourceAsStream("teacherReportTool/resources/" + resourceName);
			}
			if (retVal == null) {
				retVal = classLoader.getResourceAsStream("resources/" + resourceName);
			}
			if (retVal == null) {
				retVal = classLoader.getResourceAsStream("/resources/" + resourceName);
			}
			if (retVal == null) {
				retVal = classLoader.getResourceAsStream("/" + resourceName);
			}
			if (retVal == null) {
				retVal = classLoader.getResourceAsStream(resourceName);
			}
		} catch (Exception e) {
			System.err.println(e.getMessage());
			e.printStackTrace();
		}
	
		return retVal;
	}

	public static URL getResourceURL(String resourceName) {
		URL retVal = null;
		try {
	
			ClassLoader classLoader = (new HelpMenuBar()).getClass().getClassLoader();
	
			retVal = classLoader.getResource("/teacherReportTool/resources/" + resourceName);
			if (retVal == null) {
				retVal = classLoader.getResource("teacherReportTool/resources/" + resourceName);
			}
			if (retVal == null) {
				retVal = classLoader.getResource("resources/" + resourceName);
			}
			if (retVal == null) {
				retVal = classLoader.getResource("/resources/" + resourceName);
			}
			if (retVal == null) {
				retVal = classLoader.getResource("/" + resourceName);
			}
			if (retVal == null) {
				retVal = classLoader.getResource(resourceName);
			}
		} catch (Exception e) {
			System.err.println(e.getMessage());
			e.printStackTrace();
		}
	
		return retVal;
	}

}
